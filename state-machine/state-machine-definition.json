{
  "StartAt": "AddExecutionArn",
  "States": {
    "AddExecutionArn": {
      "Type": "Pass",
      "Next": "WorkflowStartFunction",
      "Parameters": {
        "executionArn.$": "$$.Execution.Id"
      },
      "ResultPath": "$.current"
    },
    "WorkflowStartFunction": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${WorkflowStartFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "IsAuthorized",
      "OutputPath": "$.Payload"
    },
    "IsAuthorized": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.isAuthorized",
          "BooleanEquals": true,
          "Next": "IsConcurrent"
        }
      ],
      "Default": "WorkflowUnauthorizedCleanupFunction"
    },
    "WorkflowUnauthorizedCleanupFunction": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${WorkflowUnauthorizedCleanupFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "UnauthorizedExit",
      "OutputPath": "$.Payload"
    },
    "IsConcurrent": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.isConcurrent",
          "BooleanEquals": true,
          "Next": "ConcurrentExit"
        }
      ],
      "Default": "WorkflowBackupFunction"
    },
    "WorkflowBackupFunction": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${WorkflowBackupFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "WorkflowBackupCleanupFunction",
      "OutputPath": "$.Payload"
    },
    "WorkflowBackupCleanupFunction": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${WorkflowBackupCleanupFunctionArn}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Wait",
      "OutputPath": "$.Payload"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 604800,
      "Next": "StartNextExecution"
    },
    "StartNextExecution": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution",
      "Parameters": {
        "StateMachineArn": "${StateMachineArn}",
        "Input": {
          "previousExecutionArn.$": "$$.Execution.Id",
          "userId.$": "$.userId"
        }
      },
      "Next": "Success"
    },
    "ConcurrentExit": {
      "Type": "Succeed"
    },
    "Success": {
      "Type": "Succeed"
    },
    "UnauthorizedExit": {
      "Type": "Succeed"
    }
  }
}
