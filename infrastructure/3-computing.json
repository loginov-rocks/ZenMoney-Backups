{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "OrchestratorRuleEnabled": {
      "Fn::Equals": [
        {
          "Ref": "DisableOrchestratorRule"
        },
        "false"
      ]
    }
  },
  "Outputs": {
    "ApiBaseUrl": {
      "Value": {
        "Fn::GetAtt": [
          "ApiGateway",
          "ApiEndpoint"
        ]
      }
    }
  },
  "Parameters": {
    "DisableOrchestratorRule": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Disable Orchestrator Rule",
      "Type": "String"
    },
    "DistributionStackName": {
      "Description": "Name of previously deployed \"Distribution\" CloudFormation Stack",
      "Type": "String"
    },
    "PersistentStackName": {
      "Description": "Name of previously deployed \"Persistent\" CloudFormation Stack",
      "Type": "String"
    },
    "ZenMoneyApiBaseUrl": {
      "Default": "https://api.zenmoney.ru",
      "Description": "ZenMoney API Base URL",
      "Type": "String"
    },
    "ZenMoneyApiRedirectUri": {
      "Default": "http://localhost:3000",
      "Description": "ZenMoney API Redirect URI",
      "Type": "String"
    }
  },
  "Resources": {
    "ApiGateway": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "CorsConfiguration": {
          "AllowHeaders": [
            "Authorization",
            "Content-Type"
          ],
          "AllowMethods": [
            "*"
          ],
          "AllowOrigins": [
            {
              "Fn::Sub": [
                "https://${DomainName}",
                {
                  "DomainName": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${DistributionStackName}-DomainName"
                    }
                  }
                }
              ]
            },
            "http://localhost:3000"
          ]
        },
        "Name": {
          "Fn::Sub": "${AWS::StackName}-api-gw"
        },
        "ProtocolType": "HTTP"
      }
    },
    "JwtAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AuthorizerType": "JWT",
        "JwtConfiguration": {
          "Audience": [
            {
              "Fn::ImportValue": {
                "Fn::Sub": "${DistributionStackName}-UserPoolClientId"
              }
            }
          ],
          "Issuer": {
            "Fn::Sub": [
              "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}",
              {
                "UserPoolId": {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${PersistentStackName}-UserPoolId"
                  }
                }
              }
            ]
          }
        },
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "Name": "JWT"
      }
    },
    "BackupsCreateUrlIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "IntegrationMethod": "POST",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackupsCreateUrlFunctionArn}/invocations",
            {
              "BackupsCreateUrlFunctionArn": {
                "Fn::GetAtt": [
                  "BackupsCreateUrlFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "BackupsListIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "IntegrationMethod": "POST",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackupsListFunctionArn}/invocations",
            {
              "BackupsListFunctionArn": {
                "Fn::GetAtt": [
                  "BackupsListFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "ZenMoneyAuthIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "IntegrationMethod": "POST",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ZenMoneyAuthFunctionArn}/invocations",
            {
              "ZenMoneyAuthFunctionArn": {
                "Fn::GetAtt": [
                  "ZenMoneyAuthFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "ZenMoneyValidateAuthIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "IntegrationMethod": "POST",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ZenMoneyValidateAuthFunctionArn}/invocations",
            {
              "ZenMoneyValidateAuthFunctionArn": {
                "Fn::GetAtt": [
                  "ZenMoneyValidateAuthFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PayloadFormatVersion": "2.0"
      }
    },
    "BackupsCreateUrlRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "JwtAuthorizer"
        },
        "RouteKey": "POST /backups/{fileName}/url",
        "Target": {
          "Fn::Sub": "integrations/${BackupsCreateUrlIntegration}"
        }
      }
    },
    "BackupsListRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "JwtAuthorizer"
        },
        "RouteKey": "GET /backups",
        "Target": {
          "Fn::Sub": "integrations/${BackupsListIntegration}"
        }
      }
    },
    "ZenMoneyAuthRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "JwtAuthorizer"
        },
        "RouteKey": "POST /zenmoney/auth",
        "Target": {
          "Fn::Sub": "integrations/${ZenMoneyAuthIntegration}"
        }
      }
    },
    "ZenMoneyValidateAuthRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "JwtAuthorizer"
        },
        "RouteKey": "GET /zenmoney/auth",
        "Target": {
          "Fn::Sub": "integrations/${ZenMoneyValidateAuthIntegration}"
        }
      }
    },
    "Stage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "ApiGateway"
        },
        "AutoDeploy": true,
        "StageName": "$default"
      }
    },
    "OrchestratorRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-orchestrator-rule"
        },
        "ScheduleExpression": "rate(1 day)",
        "State": {
          "Fn::If": [
            "OrchestratorRuleEnabled",
            "ENABLED",
            "DISABLED"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "OrchestratorFunction",
                "Arn"
              ]
            },
            "Id": "OrchestratorRuleTarget"
          }
        ]
      }
    },
    "CdPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": {
          "Fn::Sub": "${AWS::StackName}-cd-policy"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "cloudfront:CreateInvalidation",
                "cloudfront:GetDistributionConfig",
                "cloudfront:GetInvalidation",
                "cloudfront:ListInvalidations",
                "cloudfront:UpdateDistribution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistributionId}",
                  {
                    "DistributionId": {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${DistributionStackName}-DistributionId"
                      }
                    }
                  }
                ]
              }
            },
            {
              "Action": "lambda:UpdateFunctionCode",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BackupsCreateUrlFunction",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "BackupsListFunction",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "OrchestratorFunction",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "WorkflowBackupFunction",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ZenMoneyAuthFunction",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ZenMoneyValidateAuthFunction",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/backups-create-url-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/backups-list-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/orchestrator-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/workflow-backup-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/zenmoney-auth-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "${DeploymentBucketArn}/zenmoney-validate-auth-function.zip",
                    {
                      "DeploymentBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-DeploymentBucketArn"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:DeleteObject",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${PersistentStackName}-WebAppBucketArn"
                  }
                },
                {
                  "Fn::Sub": [
                    "${WebAppBucketArn}/*",
                    {
                      "WebAppBucketArn": {
                        "Fn::ImportValue": {
                          "Fn::Sub": "${PersistentStackName}-WebAppBucketArn"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "BackupsCreateUrlFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-backups-create-url-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${PersistentStackName}-BackupsBucketArn"
                      }
                    },
                    {
                      "Fn::Sub": [
                        "${BackupsBucketArn}/*",
                        {
                          "BackupsBucketArn": {
                            "Fn::ImportValue": {
                              "Fn::Sub": "${PersistentStackName}-BackupsBucketArn"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-backups-create-url-function-role"
        }
      }
    },
    "BackupsListFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-backups-list-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "s3:ListBucket",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-BackupsBucketArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-backups-list-function-role"
        }
      }
    },
    "OrchestratorFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-orchestrator-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:Scan",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-UsersTableArn"
                    }
                  }
                },
                {
                  "Action": "s3:ListBucket",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-BackupsBucketArn"
                    }
                  }
                },
                {
                  "Action": "sqs:SendMessage",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-BackupQueueArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-orchestrator-function-role"
        }
      }
    },
    "StateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "states.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "WorkflowBackupFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "WorkflowStartFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "WorkflowUnauthorizedCleanupFunction",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Action": "states:StartExecution",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-state-machine"
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-state-machine-role"
        }
      }
    },
    "WorkflowBackupFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-workflow-backup-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:GetItem",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-UsersTableArn"
                    }
                  }
                },
                {
                  "Action": "s3:PutObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "${BackupsBucketArn}/*",
                      {
                        "BackupsBucketArn": {
                          "Fn::ImportValue": {
                            "Fn::Sub": "${PersistentStackName}-BackupsBucketArn"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "Action": "ssm:GetParameter",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerKeyParameterArn"
                      }
                    },
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerSecretParameterArn"
                      }
                    }
                  ]
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-workflow-backup-function-role"
        }
      }
    },
    "WorkflowStartFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-workflow-start-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:GetItem",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-UsersTableArn"
                    }
                  }
                },
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-ExecutionsTableArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-workflow-start-function-role"
        }
      }
    },
    "WorkflowUnauthorizedCleanupFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-workflow-unauthorized-cleanup-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:DeleteItem",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-ExecutionsTableArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-workflow-unauthorized-cleanup-function-role"
        }
      }
    },
    "ZenMoneyAuthFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-zenmoney-auth-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:PutItem",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-UsersTableArn"
                    }
                  }
                },
                {
                  "Action": "ssm:GetParameter",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerKeyParameterArn"
                      }
                    },
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerSecretParameterArn"
                      }
                    }
                  ]
                },
                {
                  "Action": "states:StartExecution",
                  "Effect": "Allow",
                  "Resource": {
                    "Ref": "StateMachine"
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-zenmoney-auth-function-role"
        }
      }
    },
    "ZenMoneyValidateAuthFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}:*",
                      {
                        "FunctionName": {
                          "Fn::Sub": "${AWS::StackName}-zenmoney-validate-auth-function"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "AWSLambdaBasicExecutionRole"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "dynamodb:GetItem",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${PersistentStackName}-UsersTableArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": "CustomPolicy"
          }
        ],
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-zenmoney-validate-auth-function-role"
        }
      }
    },
    "CdUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "CdPolicy"
          }
        ],
        "UserName": {
          "Fn::Sub": "${AWS::StackName}-cd-user"
        }
      }
    },
    "BackupsCreateUrlFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "BACKUPS_BUCKET_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-BackupsBucketName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-backups-create-url-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BackupsCreateUrlFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "BackupsListFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "BACKUPS_BUCKET_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-BackupsBucketName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-backups-list-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BackupsListFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "OrchestratorFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "BACKUP_QUEUE_URL": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-BackupQueueUrl"
              }
            },
            "BACKUPS_BUCKET_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-BackupsBucketName"
              }
            },
            "USERS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-UsersTableName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-orchestrator-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "OrchestratorFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 60
      }
    },
    "WorkflowBackupFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "BACKUPS_BUCKET_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-BackupsBucketName"
              }
            },
            "USERS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-UsersTableName"
              }
            },
            "ZENMONEY_API_BASE_URL": {
              "Ref": "ZenMoneyApiBaseUrl"
            },
            "ZENMONEY_API_CONSUMER_KEY_PARAMETER_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerKeyParameterName"
              }
            },
            "ZENMONEY_API_CONSUMER_SECRET_PARAMETER_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerSecretParameterName"
              }
            },
            "ZENMONEY_API_REDIRECT_URI": {
              "Ref": "ZenMoneyApiRedirectUri"
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-workflow-backup-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WorkflowBackupFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 60
      }
    },
    "WorkflowStartFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "EXECUTIONS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ExecutionsTableName"
              }
            },
            "USERS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-UsersTableName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-workflow-start-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WorkflowStartFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "WorkflowUnauthorizedCleanupFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "EXECUTIONS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ExecutionsTableName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-workflow-unauthorized-cleanup-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WorkflowUnauthorizedCleanupFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "ZenMoneyAuthFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "STATE_MACHINE_ARN": {
              "Ref": "StateMachine"
            },
            "USERS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-UsersTableName"
              }
            },
            "ZENMONEY_API_BASE_URL": {
              "Ref": "ZenMoneyApiBaseUrl"
            },
            "ZENMONEY_API_CONSUMER_KEY_PARAMETER_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerKeyParameterName"
              }
            },
            "ZENMONEY_API_CONSUMER_SECRET_PARAMETER_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-ZenMoneyApiConsumerSecretParameterName"
              }
            },
            "ZENMONEY_API_REDIRECT_URI": {
              "Ref": "ZenMoneyApiRedirectUri"
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-zenmoney-auth-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ZenMoneyAuthFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "ZenMoneyValidateAuthFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "ZipFile": "exports.handler = async (event) => ({ body: JSON.stringify(event), headers: { 'content-type': 'application/json' }, statusCode: 200 });"
        },
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Fn::ImportValue": {
                "Fn::Sub": "${PersistentStackName}-UsersTableName"
              }
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-zenmoney-validate-auth-function"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ZenMoneyValidateAuthFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 20
      }
    },
    "BackupsCreateUrlFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BackupsCreateUrlFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Stage}/POST/backups/*/url"
        }
      }
    },
    "BackupsListFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BackupsListFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Stage}/GET/backups"
        }
      }
    },
    "OrchestratorFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "OrchestratorFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "OrchestratorRule",
            "Arn"
          ]
        }
      }
    },
    "ZenMoneyAuthFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ZenMoneyAuthFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Stage}/POST/zenmoney/auth"
        }
      }
    },
    "ZenMoneyValidateAuthFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ZenMoneyValidateAuthFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Stage}/GET/zenmoney/auth"
        }
      }
    },
    "StateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionS3Location": {
          "Bucket": {
            "Fn::ImportValue": {
              "Fn::Sub": "${PersistentStackName}-DeploymentBucketName"
            }
          },
          "Key": "state-machine-definition.json"
        },
        "DefinitionSubstitutions": {
          "StateMachineArn": {
            "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-state-machine"
          },
          "WorkflowBackupFunctionArn": {
            "Fn::GetAtt": [
              "WorkflowBackupFunction",
              "Arn"
            ]
          },
          "WorkflowStartFunctionArn": {
            "Fn::GetAtt": [
              "WorkflowStartFunction",
              "Arn"
            ]
          },
          "WorkflowUnauthorizedCleanupFunctionArn": {
            "Fn::GetAtt": [
              "WorkflowUnauthorizedCleanupFunction",
              "Arn"
            ]
          }
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StateMachineRole",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Sub": "${AWS::StackName}-state-machine"
        }
      }
    }
  }
}
